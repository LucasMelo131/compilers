// Programa
programa: PROGRAM ID PV corpo

// Corpo
corpo: declaracoes BEGIN lista_com END
     | BEGIN lista_com END

// Declarações
declaracoes: def_const def_tipos def_var lista_func

// Definição de Constantes
def_const: CONST lista_const
         | 

lista_const: constante lista_const_tail
lista_const_tail: lista_const 
                |

constante: ID ATRIB const_valor PV

const_valor: STRING_CONTENT
           | exp_mat

// Definição de Tipos
def_tipos: TYPE lista_tipos
         | 

lista_tipos: tipo lista_tipos_tail
lista_tipos_tail : PV lista_tipos
                 |

tipo: ID ATRIB tipo_dado

tipo_dado: INTEGER
         | REAL
         | ARRAY ABRE_COL NUMERO FECHA_COL OF tipo_dado
         | RECORD lista_var END
         | ID

// Definição de Variáveis
def_var: VAR lista_var
       | 

lista_var: variavel lista_var_tail
lista_var_tail : PV lista_var 
               |

variavel: lista_id DP tipo_dado

lista_id: ID lista_id_tail
lista_id_tail: VIRG lista_id
             |

// Funções
lista_func: funcao lista_func
          | 

funcao: nome_funcao bloco_funcao

nome_funcao: FUNCTION ID ABRE_PAR lista_var FECHA_PAR DP tipo_dado

bloco_funcao: def_var bloco
            | bloco

bloco: BEGIN lista_com END
     | comando

// Comandos
lista_com: comando PV lista_com
         | 

comando: nome ATRIB valor
       | WHILE exp_logica bloco
       | IF exp_logica THEN bloco else_bloco
       | WRITE const_valor
       | READ nome

else_bloco: ELSE bloco
          | 

// Valores
valor: exp_mat
     | ID lista_param

lista_param: ABRE_PAR lista_nome FECHA_PAR

lista_nome: parametro lista_nome_tail
          |

lista_nome_tail: VIRG lista_nome
               |

// Expressões Lógicas
exp_logica: exp_mat exp_logica_tail
exp_logica_tail: op_logico exp_logica 
               |

// Expressões Matemáticas
exp_mat: parametro exp_mat_tail
exp_mat_tail: op_mat exp_mat 
            |

parametro: nome
         | NUMERO

// Operadores
op_logico: OP_LOG

op_mat: OP_MAT

// Nome (acesso a variáveis, arrays, records)
nome: ID nome_tail
nome_tail: PT nome
         | ABRE_COL parametro FECHA_COL
         |

// Tokens Léxicos
PROGRAM : "program"
BEGIN : "begin"
END : "end"
CONST : "const"
TYPE : "type"
INTEGER : "integer"
REAL : "real"
ARRAY : "array"
OF : "of"
RECORD : "record"
VAR : "var"
FUNCTION : "function"
WHILE : "while"
IF : "if"
THEN : "then"
WRITE : "write"
READ : "read"
ELSE : "else"

OP_LOG : ">" | "<" | "=" | "!"
OP_MAT : "+" | "-" | "*" | "/"

PV : ";"
ATRIB : ":="
ABRE_COL : "["
FECHA_COL : "]"
DP : ":"
VIRG : ","
ABRE_PAR : "("
FECHA_PAR : ")"
PT : "."

ID: /[a-zA-Z][a-zA-Z0-9_]*/
NUMERO: /[0-9]+(\.[0-9]+)?/
STRING_CONTENT: "\""/[a-zA-Z0-9]+/"\""

// Ignorar espaços em branco e comentários
%import common.WS
%ignore WS

// Comentário de linha
COMMENT_LINE: /#[^\n]*/

//Comentário de bloco (pode conter quebras de linha, mas não é aninhável)
COMMENT_BLOCK: "{" ( /[^}\n]/ | /\n/ )* "}"

%ignore COMMENT_LINE
%ignore COMMENT_BLOCK